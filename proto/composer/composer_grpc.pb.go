// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/composer/composer.proto

package composer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Composer_GetTask_FullMethodName        = "/composer.Composer/GetTask"
	Composer_FinishTask_FullMethodName     = "/composer.Composer/FinishTask"
	Composer_UpdateProgress_FullMethodName = "/composer.Composer/UpdateProgress"
)

// ComposerClient is the client API for Composer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComposerClient interface {
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error)
	FinishTask(ctx context.Context, in *FinishTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateProgress(ctx context.Context, in *UpdateProgressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type composerClient struct {
	cc grpc.ClientConnInterface
}

func NewComposerClient(cc grpc.ClientConnInterface) ComposerClient {
	return &composerClient{cc}
}

func (c *composerClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, Composer_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *composerClient) FinishTask(ctx context.Context, in *FinishTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Composer_FinishTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *composerClient) UpdateProgress(ctx context.Context, in *UpdateProgressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Composer_UpdateProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComposerServer is the server API for Composer service.
// All implementations must embed UnimplementedComposerServer
// for forward compatibility.
type ComposerServer interface {
	GetTask(context.Context, *GetTaskRequest) (*Task, error)
	FinishTask(context.Context, *FinishTaskRequest) (*emptypb.Empty, error)
	UpdateProgress(context.Context, *UpdateProgressRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedComposerServer()
}

// UnimplementedComposerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComposerServer struct{}

func (UnimplementedComposerServer) GetTask(context.Context, *GetTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedComposerServer) FinishTask(context.Context, *FinishTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishTask not implemented")
}
func (UnimplementedComposerServer) UpdateProgress(context.Context, *UpdateProgressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgress not implemented")
}
func (UnimplementedComposerServer) mustEmbedUnimplementedComposerServer() {}
func (UnimplementedComposerServer) testEmbeddedByValue()                  {}

// UnsafeComposerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComposerServer will
// result in compilation errors.
type UnsafeComposerServer interface {
	mustEmbedUnimplementedComposerServer()
}

func RegisterComposerServer(s grpc.ServiceRegistrar, srv ComposerServer) {
	// If the following call pancis, it indicates UnimplementedComposerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Composer_ServiceDesc, srv)
}

func _Composer_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComposerServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Composer_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComposerServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Composer_FinishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComposerServer).FinishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Composer_FinishTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComposerServer).FinishTask(ctx, req.(*FinishTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Composer_UpdateProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComposerServer).UpdateProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Composer_UpdateProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComposerServer).UpdateProgress(ctx, req.(*UpdateProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Composer_ServiceDesc is the grpc.ServiceDesc for Composer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Composer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "composer.Composer",
	HandlerType: (*ComposerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTask",
			Handler:    _Composer_GetTask_Handler,
		},
		{
			MethodName: "FinishTask",
			Handler:    _Composer_FinishTask_Handler,
		},
		{
			MethodName: "UpdateProgress",
			Handler:    _Composer_UpdateProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/composer/composer.proto",
}
