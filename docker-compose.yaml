services:
  postgres:
    platform: linux/x86_64
    container_name: postgres
    restart: unless-stopped
    image: postgres:17.6-alpine
    env_file: .env
    ports:
      - ${PGPORT}:${PGPORT}
    expose:
      - ${PGPORT}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 5s
      timeout: 5s
      retries: 3

  migrations:
    container_name: migrations
    restart: "no"
    build:
      context: .
      dockerfile: deploy/sql-migrate.Dockerfile
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    platform: linux/x86_64
    container_name: redis
    restart: unless-stopped
    image: redis:8.2-alpine
    env_file: .env
    ports:
      - '6379:6379'
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes: 
      - redis_data:/data
    healthcheck:
      test: redis-cli -a ${REDIS_PASSWORD} ping
      interval: 5s
      timeout: 5s
      retries: 3

  composer:
    container_name: composer
    restart: unless-stopped
    build:
      context: .
      dockerfile: deploy/composer.Dockerfile
    env_file: .env
    ports:
      - ${HTTP_PORT}:${HTTP_PORT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully

  encoder:
    container_name: encoder
    restart: unless-stopped
    build:
      context: .
      dockerfile: deploy/encoder.Dockerfile
    env_file: .env
    depends_on:
      composer:
        condition: service_started
volumes:
  pg_data:
  redis_data:
